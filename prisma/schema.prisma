// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  // 主键，UUID类型，默认使用PostgreSQL的gen_random_uuid()函数生成
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  // 产品名称
  name String

  // 产品URL友好的别名，设置为唯一索引
  slug String @unique(map: "product_slug_idx")

  // 产品分类
  category String

  // 产品图片数组
  images String[]

  // 品牌名称
  brand String

  // 产品描述
  description String

  // 库存数量
  stock Int

  // 价格，12位数字，2位小数的Decimal类型
  price Decimal @default(0) @db.Decimal(12, 2)

  // 评分，3位数字，2位小数的Decimal类型
  rating Decimal @default(0) @db.Decimal(3, 2)

  // 评论数量
  numReviews Int @default(0)

  // 是否为特色产品
  isFeatured Boolean

  // 横幅图片，可选字段
  banner String?

  // 创建时间，自动设置为当前时间
  createdAt DateTime    @default(now()) @db.Timestamp(6)
  OrderItem OrderItem[]
  Review    Review[]
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String    @default("ND_NAME")
  email         String    @unique(map: "user_email_idx")
  emailVerified DateTime? @db.Timestamp(6)
  image         String?
  password      String?
  role          String    @default("user")
  address       Json?     @db.Json
  paymentMethod String?
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @updatedAt

  // 关联字段 - 与Account和Session模型的一对多关系
  account Account[] // 一个用户可以有多个第三方账号
  session Session[] // 一个用户可以有多个会话
  cart    Cart[]
  Order   Order[]
  Review  Review[]
}

model Account {
  // 账号模型 - 用于存储第三方认证账号信息（如Google、Facebook等）
  userId            String   @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @db.Timestamp(6)
  updatedAt         DateTime @updatedAt
  // 关联字段 - 与User模型的多对一关系
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // 复合主键：提供商+提供商账号ID
  @@id([provider, providerAccountId])
}

model Session {
  // 会话模型 - 用于管理用户登录会话
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  // 关联字段 - 与User模型的多对一关系
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  // 验证令牌模型 - 用于邮箱验证流程
  identifier String
  token      String
  expires    DateTime @db.Timestamp(6)

  // 复合唯一索引：确保标识符和令牌的组合是唯一的
  @@id([identifier, token])
}

model Cart {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String?  @db.Uuid
  sessionCartId String
  items         Json[]   @default([]) @db.Json
  itemsPrice    Decimal  @db.Decimal(12, 2)
  totalPrice    Decimal  @db.Decimal(12, 2)
  shippingPrice Decimal  @db.Decimal(12, 2)
  taxPrice      Decimal  @db.Decimal(12, 2)
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "cart_userId_user_id_fk")
}

model Order {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String      @db.Uuid
  shippingAddress Json        @db.Json
  paymentMethod   String
  paymentResult   Json?
  itemsPrice      Decimal     @db.Decimal(12, 2)
  shippingPrice   Decimal     @db.Decimal(12, 2)
  taxPrice        Decimal     @db.Decimal(12, 2)
  totalPrice      Decimal     @db.Decimal(12, 2)
  isPaid          Boolean     @default(false)
  paidAt          DateTime?   @db.Timestamp(6)
  isDelivered     Boolean     @default(false)
  deliveredAt     DateTime?   @db.Timestamp(6)
  createdAt       DateTime    @default(now()) @db.Timestamp()
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade, map: "order_userId_user_id_fk")
  orderItems      OrderItem[]
}

model OrderItem {
  orderId   String  @db.Uuid
  productId String  @db.Uuid
  qty       Int
  price     Decimal @db.Decimal(12, 2)
  name      String
  slug      String
  image     String

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([orderId, productId], map: "orderitems_orderId_productId_pk")
}

model Review {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId             String   @db.Uuid
  productId          String   @db.Uuid
  rating             Int
  title              String
  description        String
  isVerifiedPurchase Boolean  @default(true)
  createdAt          DateTime @default(now()) @db.Timestamp(6)
  product            Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "reviews_productId_product_id_fk")
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "reviews_userId_user_id_fk")
}
